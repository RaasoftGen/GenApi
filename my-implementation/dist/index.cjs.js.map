{"version":3,"file":"index.cjs.js","sources":["../src/utils/index.ts","../src/apis/DeviceBase.ts","../src/apis/ReceiptPrinter.ts","../src/apis/CashDispenser.ts","../src/apis/CardReader.ts","../src/apis/CashAcceptor.ts","../src/apis/PinPad.ts","../src/apis/Camera.ts","../src/apis/CardDispenser.ts","../src/apis/BarcodeReader.ts","../src/apis/PassportScanner.ts","../src/apis/IDScanner.ts","../src/apis/DocumentPrinter.ts","../src/apis/DocumentScanner.ts","../src/apis/Fingerprint.ts","../src/apis/RFIDReader.ts","../src/apis/Signpad.ts","../src/apis/PalmveinScanner.ts","../src/apis/EKTPReader.ts","../src/apis/ChecksAcceptor.ts","../src/apis/VoiceGuidance.ts","../src/apis/Terminal.ts","../src/apis/Transaction.ts","../src/apis/NDC.ts","../src/apis/DeviceEvent.ts","../src/apis/Common.ts","../src/enums/index.ts","../src/models/response.ts","../src/encryption/index.ts","../src/websocket/index.ts","../src/core/ATMDeviceAPI.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class EventBus {\r\n  private events: { [key: string]: Function[] } = {};\r\n\r\n  on(eventName: string, callback: Function): void {\r\n    if (!this.events[eventName]) {\r\n      this.events[eventName] = [];\r\n    }\r\n    this.events[eventName].push(callback);\r\n  }\r\n\r\n  emit(eventName: string, ...args: any[]): boolean {\r\n    const callbacks = this.events[eventName];\r\n    if (!callbacks || callbacks.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    for (const callback of callbacks) {\r\n      callback(...args);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  off(eventName: string, callback?: Function): boolean {\r\n    const callbacks = this.events[eventName];\r\n    if (!callbacks || callbacks.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    if (callback) {\r\n      for (let i = callbacks.length - 1; i >= 0; i--) {\r\n        if (callbacks[i] === callback) {\r\n          callbacks.splice(i, 1);\r\n        }\r\n      }\r\n    } else {\r\n      this.events[eventName].length = 0;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  offAll(): void {\r\n    Object.keys(this.events).forEach(eventName => {\r\n      this.off(eventName);\r\n    });\r\n  }\r\n}\r\n\r\nexport class EventBusHandler {\r\n  private eventBus: EventBus;\r\n\r\n  constructor() {\r\n    this.eventBus = new EventBus();\r\n  }\r\n\r\n  sendEvent(eventName: string, ...args: any[]): void {\r\n    this.eventBus.emit(eventName, ...args);\r\n  }\r\n\r\n  addEventListener(eventName: string, callback: Function, removeExisting: boolean = true): void {\r\n    if (removeExisting) {\r\n      this.eventBus.off(eventName, callback);\r\n    }\r\n    this.eventBus.on(eventName, callback);\r\n  }\r\n\r\n  removeEventListener(eventName: string, callback?: Function): void {\r\n    this.eventBus.off(eventName, callback);\r\n  }\r\n\r\n  removeAllEventListener(): void {\r\n    this.eventBus.offAll();\r\n  }\r\n}\r\n\r\nexport class MessageFormat {\r\n  public Header: string;\r\n  public Payload: any;\r\n  public IsEncrypt: boolean;\r\n  public Token: string;\r\n\r\n  constructor(header: string, payload: any, isEncrypt: boolean = false, token: string = '') {\r\n    this.Header = header;\r\n    this.Payload = payload;\r\n    this.IsEncrypt = isEncrypt;\r\n    this.Token = token;\r\n  }\r\n}\r\n\r\nexport class WARPJsonFormat {\r\n  public Name: string;\r\n  public Tag: string;\r\n  public DataParameter: any;\r\n\r\n  constructor(name: string, tag: string, dataParameter: any) {\r\n    this.Name = name;\r\n    this.Tag = tag;\r\n    this.DataParameter = dataParameter;\r\n  }\r\n}\r\n\r\nexport class Caller {\r\n  public name: string;\r\n  public callBack: Function;\r\n\r\n  constructor(name: string, callback: Function) {\r\n    this.name = name;\r\n    this.callBack = callback;\r\n  }\r\n}\r\n\r\nexport function generateUUID(): string {\r\n  return uuidv4();\r\n}\r\n","import { EventBusHandler, generateUUID } from '../utils';\r\n\r\n/**\r\n * Base class for all ATM device controllers\r\n * This class provides common functionality like event handling and communication\r\n */\r\nexport default abstract class DeviceBase {\r\n  protected className: string;\r\n  private eventHandler: EventBusHandler;\r\n  private dataCallback: ((data: any) => void) | null = null;\r\n\r\n  protected constructor(className: string) {\r\n    this.className = className;\r\n    this.eventHandler = new EventBusHandler();\r\n  }\r\n\r\n  /**\r\n   * Register a function to receive device events\r\n   * @param dataCallback - Function to handle device responses\r\n   */\r\n  public addListener(dataCallback: (data: any) => void): void {\r\n    this.dataCallback = dataCallback;\r\n    this.eventHandler.addEventListener(this.className, dataCallback);\r\n  }\r\n\r\n  /**\r\n   * Unregister the event listener\r\n   */\r\n  public removeListener(): void {\r\n    if (this.dataCallback) {\r\n      this.eventHandler.removeEventListener(this.className, this.dataCallback);\r\n      this.dataCallback = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a command to the device\r\n   * @param command - Command name\r\n   * @param parameters - Command parameters\r\n   */\r\n  protected sendCommand(command: string, parameters: any = {}): void {\r\n    const message = {\r\n      Command: command,\r\n      RequestId: generateUUID(),\r\n      DeviceName: this.className,\r\n      Timestamp: new Date().toISOString(),\r\n      ...parameters\r\n    };\r\n\r\n    // This would be sent through the WebSocket connection\r\n    console.log(`Sending command to ${this.className}:`, message);\r\n    \r\n    // Simulate sending through WebSocket\r\n    this.simulateCommand(message);\r\n  }\r\n\r\n  /**\r\n   * In a class that extends DeviceBase, add eventCallback handling according to the class\r\n   * @param obj - Response object\r\n   */\r\n  protected abstract othersEventCallback(obj: any): boolean;\r\n\r\n  /**\r\n   * Simulate command execution for testing\r\n   * In real implementation, this would go through WebSocket\r\n   */\r\n  private simulateCommand(message: any): void {\r\n    // Simulate response after delay\r\n    setTimeout(() => {\r\n      const response = {\r\n        Command: message.Command + 'Completed',\r\n        RequestId: message.RequestId,\r\n        DeviceName: this.className,\r\n        Detail: 'OK',\r\n        Timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      this.handleResponse(response);\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Handle response from device\r\n   */\r\n  private handleResponse(response: any): void {\r\n    // First, try device-specific handler\r\n    const handled = this.othersEventCallback(response);\r\n    \r\n    // If not handled and we have a callback, call it\r\n    if (!handled && this.dataCallback) {\r\n      this.dataCallback(response);\r\n    }\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { ReceiptPrinterStatusResponse } from '../models';\r\nimport { ResetActionType } from '../enums';\r\n\r\ntype PrintParams = Partial<{\r\n  headerImageData: string;\r\n  taillmageData: string;\r\n  skipPrintHeaderImage: boolean;\r\n}> & {\r\n  printData: Array<string>;\r\n};\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the receipt printer device in an ATM.\r\n * To control the device, this class consists of event listeners, control commands.\r\n * As the methods are asynchronous, the caller should register a callback function\r\n * to receive the corresponding response by using an `addListener` before calling a method.\r\n * When it finishes controlling the device, it should `removeListener` to stop receiving responses.\r\n * Also, some inquiry methods have parameters like a callback function to receive the result.\r\n */\r\nexport default class ReceiptPrinter extends DeviceBase {\r\n  constructor() {\r\n    super('ReceiptPrinter');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    // Handle receipt printer specific events\r\n    switch (obj.Command) {\r\n      case 'PrintCompleted':\r\n        console.log('Print operation completed:', obj);\r\n        return true;\r\n      case 'EjectMediaCompleted':\r\n        console.log('Eject operation completed:', obj);\r\n        return true;\r\n      case 'ResetDeviceCompleted':\r\n        console.log('Reset operation completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to print a receipt.\r\n   * As the result of printing, `PrintCompleted` will be sent.\r\n   *\r\n   * @param printData - Array of strings to print\r\n   * @param skipPrintHeaderImage - Skip printing header image\r\n   * @param headerImageData - Base64 encoded header image\r\n   * @param taillmageData - Base64 encoded tail image\r\n   */\r\n  public print({\r\n    printData,\r\n    skipPrintHeaderImage,\r\n    headerImageData,\r\n    taillmageData\r\n  }: PrintParams): void {\r\n    this.sendCommand('Print', {\r\n      printData,\r\n      skipPrintHeaderImage,\r\n      headerImageData,\r\n      taillmageData\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to print a receipt with eject.\r\n   * As the result of printing, `PrintCompleted` will be sent.\r\n   *\r\n   * @param printData - Array of strings to print\r\n   * @param skipPrintHeaderImage - Skip printing header image\r\n   * @param headerImageData - Base64 encoded header image\r\n   * @param taillmageData - Base64 encoded tail image\r\n   */\r\n  public printWithEject({\r\n    printData,\r\n    skipPrintHeaderImage,\r\n    headerImageData,\r\n    taillmageData\r\n  }: PrintParams): void {\r\n    this.sendCommand('PrintWithEject', {\r\n      printData,\r\n      skipPrintHeaderImage,\r\n      headerImageData,\r\n      taillmageData\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to eject a receipt.\r\n   * As the result of ejecting, `EjectMediaCompleted` will be sent.\r\n   */\r\n  public eject(): void {\r\n    this.sendCommand('EjectMedia');\r\n  }\r\n\r\n  /**\r\n   * A function to reset receipt device.\r\n   * For example, if `reset` method is operating, the `ResetDeviceCompleted` event will be sent.\r\n   *\r\n   * @param action - Define device reset action.\r\n   */\r\n  public reset(action: ResetActionType): void {\r\n    this.sendCommand('ResetDevice', { action });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of receiptPrinter device.\r\n   *\r\n   * @param receiptPrinterStatusEventCallback - The callback function to receive the response\r\n   */\r\n  public getStatus(receiptPrinterStatusEventCallback: (obj: ReceiptPrinterStatusResponse) => void): void {\r\n    // Add temporary listener for status response\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'ReceiptPrinterStatusResponse') {\r\n        receiptPrinterStatusEventCallback(response as ReceiptPrinterStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { CashDispenserStatusResponse } from '../models';\r\nimport { ResetActionType } from '../enums';\r\n\r\n/**\r\n * @group API\r\n * @description This class consists of functions related to the withdrawal transaction such as `dispenseByAmount`, `retractNote` etc.\r\n * Most methods are asynchronous so the caller should register a callback function to receive the corresponding response to those asynchronous functions by using\r\n * `addListener` before calling a method or pass the callback function as a parameter.\r\n * Also, when it finishes controlling the transaction, it should `removeListener` to stop receiving responses.\r\n */\r\nexport default class CashDispenser extends DeviceBase {\r\n  constructor() {\r\n    super('CashDispenser');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    // Handle cash dispenser specific events\r\n    switch (obj.Command) {\r\n      case 'ItemsPresented':\r\n        console.log('Cash presented to customer:', obj);\r\n        return true;\r\n      case 'DispenseNoteCompleted':\r\n        console.log('Dispense operation completed:', obj);\r\n        return true;\r\n      case 'ItemsTaken':\r\n        console.log('Cash taken by customer:', obj);\r\n        return true;\r\n      case 'RetractNoteCompleted':\r\n        console.log('Retract operation completed:', obj);\r\n        return true;\r\n      case 'DenominateNoteCompleted':\r\n        console.log('Denomination check completed:', obj);\r\n        return true;\r\n      case 'PresentNoteCompleted':\r\n        console.log('Present note completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function that commands the withdraw to request amount.\r\n   * As the result of the operation, an `ItemsPresented` and `DispenseNoteCompleted` response will be sent.\r\n   * when dispensing cash is completed and the ATM is waiting for a customer to take the cash.\r\n   * When the customer takes the bills, an `ItemsTaken` response is sent.\r\n   * If the customer does not take the cash after a certain amount of time,\r\n   * an `ItemsTaken` is sent with additional information in `Detail` field and cash will be retracted.\r\n   *\r\n   * @param amount - The amount to be dispensed.\r\n   * @param takeNoteTimeout - Take note timeout (default: 0 / milliseconds / 0 means timeout infinity)\r\n   * @param present - Decide whether immediately present notes after dispense. (default: true)\r\n   */\r\n  public dispenseByAmount({\r\n    amount,\r\n    takeNoteTimeout = 0,\r\n    present = true\r\n  }: {\r\n    amount: number;\r\n    takeNoteTimeout?: number;\r\n    present?: boolean;\r\n  }): void {\r\n    this.sendCommand('DispenseByAmount', {\r\n      amount,\r\n      takeNoteTimeout,\r\n      present\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function that commands the withdraw to request count array.\r\n   * As the result of the operation, an `ItemsPresented` and `DispenseNoteCompleted` response will be sent.\r\n   * when dispensing cash is completed and the ATM is waiting for a customer to take the cash.\r\n   * When the customer takes the bills, an `ItemsTaken` response is sent.\r\n   * If the customer does not take the cash after a certain amount of time,\r\n   * an `ItemsTaken` is sent with additional information in `Detail` field and cash will be retracted.\r\n   *\r\n   * @param count - The count list.\r\n   * @param takeNoteTimeout - Take note timeout (default: 0 / milliseconds / 0 means timeout infinity)\r\n   * @param present - Decide whether immediately present notes after dispense. (default: true)\r\n   */\r\n  public dispenseByCount({\r\n    count,\r\n    takeNoteTimeout = 0,\r\n    present = true\r\n  }: {\r\n    count: Array<number>;\r\n    takeNoteTimeout?: number;\r\n    present?: boolean;\r\n  }): void {\r\n    this.sendCommand('DispenseByCount', {\r\n      count,\r\n      takeNoteTimeout,\r\n      present\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to retract notes dispenser device.\r\n   * For example, if `retractNote` method is operating, the `RetractNoteCompleted` event will be sent.\r\n   */\r\n  public retractNote(): void {\r\n    this.sendCommand('RetractNote');\r\n  }\r\n\r\n  /**\r\n   * A function to reset cash dispenser device.\r\n   * For example, if `reset` method is operating, the `ResetDeviceCompleted` event will be sent.\r\n   *\r\n   * @param action - Define device reset action.\r\n   */\r\n  public reset(action: ResetActionType): void {\r\n    this.sendCommand('ResetDevice', { action });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of cash dispenser device.\r\n   *\r\n   * @param cashDispenserStatusEventCallback - The callback function to receive the response\r\n   */\r\n  public getStatus(cashDispenserStatusEventCallback: (obj: CashDispenserStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'CashDispenserStatusResponse') {\r\n        cashDispenserStatusEventCallback(response as CashDispenserStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n\r\n  /**\r\n   * This function checks whether the desired amount can be dispensed.\r\n   * For example, if `isAmountDispensable` method is operating, the `DenominateNoteCompleted` event will be sent.\r\n   *\r\n   * @param amount - This is the amount to check whether dispensing is possible.\r\n   */\r\n  public isAmountDispensable(amount: number): void {\r\n    this.sendCommand('IsAmountDispensable', { amount });\r\n  }\r\n\r\n  /**\r\n   * This function checks whether the desired cassette count can be dispensed.\r\n   * For example, if `isCountDispensable` method is operating, the `DenominateNoteCompleted` event will be sent.\r\n   *\r\n   * @param counts - This is to check whether each cassette has a dispensable count.\r\n   */\r\n  public isCountDispensable(counts: Array<number>): void {\r\n    this.sendCommand('IsCountDispensable', { counts });\r\n  }\r\n\r\n  /**\r\n   * A function to present dispensed note using dispenseByAmount or dispenseByCounts.\r\n   * For example, if `presentNote` method is operating, the `PresentNoteCompleted` event will be sent.\r\n   *\r\n   * @param timeout - Timeout for take note. (default: 0 millisecond, which means infinity)\r\n   */\r\n  public presentNote(timeout: number = 0): void {\r\n    this.sendCommand('PresentNote', { timeout });\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { CardReaderStatusResponse } from '../models';\r\nimport { ResetActionType } from '../enums';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the card reader device in an ATM.\r\n * It handles card insertion, reading magnetic stripe and chip data, and card ejection.\r\n * As the methods are asynchronous, the caller should register a callback function\r\n * to receive the corresponding response by using an `addListener` before calling a method.\r\n * When it finishes controlling the device, it should `removeListener` to stop receiving responses.\r\n */\r\nexport default class CardReader extends DeviceBase {\r\n  constructor() {\r\n    super('CardReader');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    // Handle card reader specific events\r\n    switch (obj.Command) {\r\n      case 'CardReadCompleted':\r\n        console.log('Card read completed:', obj);\r\n        return true;\r\n      case 'EjectCardCompleted':\r\n        console.log('Card eject completed:', obj);\r\n        return true;\r\n      case 'RetractCardCompleted':\r\n        console.log('Card retract completed:', obj);\r\n        return true;\r\n      case 'ChipInitializeCompleted':\r\n        console.log('Chip initialize completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to read card data from magnetic stripe or chip.\r\n   * As the result of reading, `CardReadCompleted` will be sent.\r\n   *\r\n   * @param timeout - Read timeout in milliseconds (default: 30000)\r\n   * @param tracks - Which tracks to read (default: all tracks)\r\n   */\r\n  public readCard(timeout: number = 30000, tracks: string = 'AllTrack'): void {\r\n    this.sendCommand('ReadCard', {\r\n      timeout,\r\n      tracks\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to eject the card.\r\n   * As the result of ejecting, `EjectCardCompleted` will be sent.\r\n   */\r\n  public ejectCard(): void {\r\n    this.sendCommand('EjectCard');\r\n  }\r\n\r\n  /**\r\n   * A function to retract the card.\r\n   * As the result of retracting, `RetractCardCompleted` will be sent.\r\n   */\r\n  public retractCard(): void {\r\n    this.sendCommand('RetractCard');\r\n  }\r\n\r\n  /**\r\n   * A function to initialize chip card.\r\n   * As the result of initialization, `ChipInitializeCompleted` will be sent.\r\n   */\r\n  public initializeChip(): void {\r\n    this.sendCommand('ChipInitialize');\r\n  }\r\n\r\n  /**\r\n   * A function to reset card reader device.\r\n   * For example, if `reset` method is operating, the `ResetDeviceCompleted` event will be sent.\r\n   *\r\n   * @param action - Define device reset action.\r\n   */\r\n  public reset(action: ResetActionType): void {\r\n    this.sendCommand('ResetDevice', { action });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of card reader device.\r\n   *\r\n   * @param cardReaderStatusEventCallback - The callback function to receive the response\r\n   */\r\n  public getStatus(cardReaderStatusEventCallback: (obj: CardReaderStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'CardReaderStatusResponse') {\r\n        cardReaderStatusEventCallback(response as CardReaderStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n\r\n  /**\r\n   * A function to power on chip card.\r\n   * As the result of power on, `ChipPowerCompleted` will be sent.\r\n   */\r\n  public chipPowerOn(): void {\r\n    this.sendCommand('ChipPowerOn');\r\n  }\r\n\r\n  /**\r\n   * A function to power off chip card.\r\n   * As the result of power off, `ChipPowerCompleted` will be sent.\r\n   */\r\n  public chipPowerOff(): void {\r\n    this.sendCommand('ChipPowerOff');\r\n  }\r\n\r\n  /**\r\n   * A function to send APDU command to chip card.\r\n   * As the result of APDU, `ChipIOCompleted` will be sent.\r\n   *\r\n   * @param apduCommand - APDU command in hex string format\r\n   */\r\n  public chipIO(apduCommand: string): void {\r\n    this.sendCommand('ChipIO', { apduCommand });\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { CashAcceptorStatusResponse } from '../models';\r\nimport { ResetActionType } from '../enums';\r\n\r\ntype AcceptParams = Partial<{\r\n  denominationList: Array<number>;\r\n  maxCount: number;\r\n  maxAmount: number;\r\n  insertNoteTimeout: number;\r\n  takeNoteTimeout: number;\r\n}> & {\r\n  currencyID: string;\r\n};\r\n\r\n/**\r\n * @group API\r\n * @description This class consists of functions related to the deposit transaction such as\r\n * `accept`, `verifyConfirmDeposit`, `commit`, etc.\r\n * The methods, except for addListener and removeListener, are all asynchronous.\r\n * So the caller should register a callback function to receive the corresponding response by using an\r\n * `addListener` before calling a method or pass the callback function as a parameter\r\n * depending on the method. Also, when it finishes controlling the transaction,\r\n * it should `removeListener` to stop receiving responses.\r\n */\r\nexport default class CashAcceptor extends DeviceBase {\r\n  constructor() {\r\n    super('CashAcceptor');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    // Handle cash acceptor specific events\r\n    switch (obj.Command) {\r\n      case 'ItemsInserted':\r\n        console.log('Cash inserted by customer:', obj);\r\n        return true;\r\n      case 'ItemsPresented':\r\n        console.log('Cash presented to customer:', obj);\r\n        return true;\r\n      case 'ItemsTaken':\r\n        console.log('Cash taken by customer:', obj);\r\n        return true;\r\n      case 'AcceptNoteCompleted':\r\n        console.log('Accept cash operation completed:', obj);\r\n        return true;\r\n      case 'RefuseNoteCompleted':\r\n        console.log('Refuse cash operation completed:', obj);\r\n        return true;\r\n      case 'ReturnNoteCompleted':\r\n        console.log('Return cash operation completed:', obj);\r\n        return true;\r\n      case 'RetractNoteCompleted':\r\n        console.log('Retract cash operation completed:', obj);\r\n        return true;\r\n      case 'CommitNoteCompleted':\r\n        console.log('Commit operation completed:', obj);\r\n        return true;\r\n      case 'NoteError':\r\n        console.log('Note error occurred:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use the `accept` instead.\r\n   * A function that starts a cash deposit transaction, waits for a customer to insert cash, and completes counting the cash.\r\n   * The responses such as `ItemsInserted`, `ItemsPresented`, `ItemsTaken`, `NoteError`\r\n   * and `AcceptNoteCompleted`, and `RefuseNoteCompleted` will be sent.\r\n   */\r\n  public acceptCash(\r\n    denominationList: Array<number>,\r\n    currencyID: string,\r\n    maxCount: number = 0,\r\n    maxAmount: number = 0,\r\n    insertNoteTimeout: number = 30000,\r\n    takeNoteTimeout: number = 0\r\n  ): void {\r\n    this.accept({\r\n      denominationList,\r\n      currencyID,\r\n      maxCount,\r\n      maxAmount,\r\n      insertNoteTimeout,\r\n      takeNoteTimeout\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function that starts a cash deposit transaction, waits for a customer to insert cash, and completes counting the cash.\r\n   * The responses such as `ItemsInserted`, `ItemsPresented`, `ItemsTaken`,\r\n   * `AcceptNoteCompleted` and `RefuseNoteCompleted` will be sent.\r\n   */\r\n  public accept({\r\n    denominationList = Array.from({length: 100}, (_, i) => i + 1),\r\n    currencyID,\r\n    maxCount = 0,\r\n    maxAmount = 0,\r\n    insertNoteTimeout = 30000,\r\n    takeNoteTimeout = 0\r\n  }: AcceptParams): void {\r\n    this.sendCommand('AcceptCash', {\r\n      denominationList,\r\n      currencyID,\r\n      maxCount,\r\n      maxAmount,\r\n      insertNoteTimeout,\r\n      takeNoteTimeout\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use the `return` instead.\r\n   * A function that returns the cash to a customer and waits for the customer to take the cash.\r\n   * As the result of the operation, `ReturnNoteCompleted`, `ItemsTaken` and `ItemsPresented` will be sent.\r\n   */\r\n  public returnCash(takeNoteTimeout: number = 0): void {\r\n    this.return(takeNoteTimeout);\r\n  }\r\n\r\n  /**\r\n   * A function that returns the cash to a customer and waits for the customer to take the cash.\r\n   * As the result of the operation, `ReturnNoteCompleted`, `ItemsTaken` and `ItemsPresented` will be sent.\r\n   */\r\n  public return(takeNoteTimeout: number = 0): void {\r\n    this.sendCommand('ReturnCash', { takeNoteTimeout });\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use the `retract` instead.\r\n   * A function that returns the cash to a customer and waits for the customer to take the cash.\r\n   * As the result of the operation, `RetractNoteCompleted` are sent.\r\n   */\r\n  public retractCash(): void {\r\n    this.retract();\r\n  }\r\n\r\n  /**\r\n   * A function that returns the cash to a customer and waits for the customer to take the cash.\r\n   * As the result of the operation, `RetractNoteCompleted` are sent.\r\n   */\r\n  public retract(): void {\r\n    this.sendCommand('RetractCash');\r\n  }\r\n\r\n  /**\r\n   * A function that asks you to deposit a cash or check to finish the transaction.\r\n   * Depending on the transaction type, corresponding responses will be sent.\r\n   * If it is a cash deposit, a `CommitNoteCompleted` will be sent.\r\n   */\r\n  public commit(): void {\r\n    this.sendCommand('CommitCash');\r\n  }\r\n\r\n  /**\r\n   * A function that cancels the requests for accepting cash or checks.\r\n   * A `AcceptNoteCompleted` response will be sent if the operation can be canceled.\r\n   */\r\n  public cancel(): void {\r\n    this.sendCommand('CancelAccept');\r\n  }\r\n\r\n  /**\r\n   * A function to reset cash acceptor device.\r\n   * For example, if `reset` method is operating, the `ResetDeviceCompleted` event will be sent.\r\n   */\r\n  public reset(action: ResetActionType): void {\r\n    this.sendCommand('ResetDevice', { action });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of cash acceptor device.\r\n   */\r\n  public getStatus(cashAcceptorStatusEventCallback: (obj: CashAcceptorStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'CashAcceptorStatusResponse') {\r\n        cashAcceptorStatusEventCallback(response as CashAcceptorStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { PinPadStatusResponse } from '../models';\r\nimport { ResetActionType } from '../enums';\r\n\r\n// Add PinPad specific enums\r\nexport enum PinPadKey {\r\n  ENTER = 'ENTER',\r\n  CLEAR = 'CLEAR', \r\n  CANCEL = 'CANCEL',\r\n  NUMBERS = 'NUMBERS',\r\n  F1 = 'F1',\r\n  F2 = 'F2',\r\n  F3 = 'F3',\r\n  F4 = 'F4',\r\n  F5 = 'F5',\r\n  F6 = 'F6',\r\n  F7 = 'F7',\r\n  F8 = 'F8'\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the Pinpad device in an ATM to get a customer's PIN for a transaction.\r\n * To control the Pinpad, this class consists of event listeners and control commands\r\n * As the control methods are all asynchronous, the caller should register a callback function\r\n * to receive the corresponding response by using an `addListener` before calling a method.\r\n * Also, when it finishes controlling the device, it should `removeListener` not to get the response.\r\n */\r\nexport default class PinPad extends DeviceBase {\r\n  constructor() {\r\n    super('PinPad');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    // Handle PinPad specific events\r\n    switch (obj.Command) {\r\n      case 'KeyPressed':\r\n        console.log('Key pressed on PinPad:', obj);\r\n        return true;\r\n      case 'PinEntryCompleted':\r\n        console.log('PIN entry completed:', obj);\r\n        return true;\r\n      case 'CustomerInputReceived':\r\n        console.log('Customer input received:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to enable the Pinpad to get the PIN from a customer.\r\n   * After this method is called, a `KeyPressed` response is sent to the registered callback function\r\n   * when a customer presses a key. When the PIN entry is completed, the response `PinEntryCompleted`\r\n   * will be passed to the callback function. When the PIN entry is canceled because the customer\r\n   * presses the CANCEL key, `PinEntryCompleted` will be sent with `CANCELLED` in the `Detail` field.\r\n   * If the customer does not enter PIN after a certain amount of time,\r\n   * the caller will get a `PinEntryCompleted` response with `TIMEOUT` in the `Detail` field.\r\n   * If there is an error activating the Pinpad,\r\n   * a `PinEntryCompleted` response will be sent from the ATM with `ERROR` in the `Detail` field.\r\n   *\r\n   * @param minDigits - The minimum number of key presses\r\n   * @param maxDigits - The maximum number of key presses\r\n   * @param autoEnd - Whether to proceed the transaction automatically when reached `maxDigits`\r\n   * @param timeout - The time to wait for data entry to be finished (default: 30000 milliseconds)\r\n   */\r\n  public inputPIN(\r\n    minDigits: number,\r\n    maxDigits: number,\r\n    autoEnd: boolean,\r\n    timeout: number = 30000\r\n  ): void {\r\n    this.sendCommand('InputPIN', {\r\n      minDigits,\r\n      maxDigits,\r\n      autoEnd,\r\n      timeout\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to enable the Pinpad to get the input data from a customer such as phone number.\r\n   * After this method is called, a `KeyPressed` response is sent to the registered callback function\r\n   * when a customer presses a key. When the data entry is completed, the response `CustomerInputReceived`\r\n   * will be passed to the callback function. When the data entry is canceled because the customer\r\n   * presses the `CANCEL` key, `CustomerInputReceived` will be sent with `CANCELLED` in the `Detail` field.\r\n   * If there is an error activating the Pinpad,\r\n   * A `CustomerInputReceived` response will be sent from the ATM with `ERROR` in the `Detail` field.\r\n   *\r\n   * @param maxDigits - The maximum number of key presses\r\n   * @param activeKeys - The keys that are enabled to be pressed\r\n   * @param terminateKeys - The keys that end the data entry\r\n   * @param timeout - The time to wait for data entry to be finished (default: 30000 milliseconds)\r\n   */\r\n  public inputData(\r\n    maxDigits: number,\r\n    activeKeys: Array<PinPadKey>,\r\n    terminateKeys: Array<PinPadKey>,\r\n    timeout: number = 30000\r\n  ): void {\r\n    this.sendCommand('InputData', {\r\n      maxDigits,\r\n      activeKeys,\r\n      terminateKeys,\r\n      timeout\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to cancel `inputPIN` or `inputData` command.\r\n   * If the ATM is able to cancel the operation, the `KeyPressed` response will be sent with the `PressedKey` field `CANCELLED`.\r\n   */\r\n  public cancel(): void {\r\n    this.sendCommand('CancelInput');\r\n  }\r\n\r\n  /**\r\n   * A function to reset Pin Pad device.\r\n   * For example, if `reset` method is operating, the `ResetDeviceCompleted` event will be sent.\r\n   */\r\n  public reset(): void {\r\n    this.sendCommand('ResetDevice');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of pinpad device.\r\n   */\r\n  public getStatus(pinPadStatusEventCallback: (obj: PinPadStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'PinPadStatusResponse') {\r\n        pinPadStatusEventCallback(response as PinPadStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { CameraStatusResponse } from '../models';\r\n\r\nexport enum CameraType {\r\n  ROOM = 'ROOM',\r\n  PERSON = 'PERSON', \r\n  EXITSLOT = 'EXITSLOT'\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the camera in the ATM.\r\n * To control the camera, this class consists of event listeners and camera control commands such as capture.\r\n * The methods, except for addListener and removeListener, are all asynchronous.\r\n * So the caller should register a callback function to receive the corresponding response by using addListener before calling a method.\r\n * Also, when it finishes controlling the device, it should removeListener to stop receiving responses.\r\n */\r\nexport default class Camera extends DeviceBase {\r\n  constructor() {\r\n    super('Camera');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    // Handle camera specific events\r\n    switch (obj.Command) {\r\n      case 'CaptureImageCompleted':\r\n        console.log('Image capture completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to capture by camera.\r\n   * When capture is completed, the response CaptureImageCompleted will be passed to the registered callback function.\r\n   *\r\n   * @param cameraType - ROOM, PERSON, EXITSLOT\r\n   * @param fileName - file name only\r\n   * @param textOnImage - text to be added to the image\r\n   */\r\n  public capture({\r\n    cameraType,\r\n    fileName,\r\n    textOnImage\r\n  }: {\r\n    cameraType: CameraType;\r\n    fileName: string;\r\n    textOnImage?: string;\r\n  }): void {\r\n    this.sendCommand('CaptureImage', {\r\n      cameraType,\r\n      fileName,\r\n      textOnImage\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of camera device.\r\n   */\r\n  public getStatus(cameraStatusEventCallback: (obj: CameraStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'CameraStatusResponse') {\r\n        cameraStatusEventCallback(response as CameraStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { CardDispenserStatusResponse } from '../models';\r\nimport { ResetActionType } from '../enums';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the card dispenser device in an ATM.\r\n * To control the device, this class consists of event listeners, control commands.\r\n * As the methods are asynchronous, the caller should register a callback function\r\n * to receive the corresponding response by using an `addListener` before calling a method.\r\n * When it finishes controlling the device, it should `removeListener` to stop receiving responses.\r\n */\r\nexport default class CardDispenser extends DeviceBase {\r\n  constructor() {\r\n    super('CardDispenser');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'DispenseCardCompleted':\r\n        console.log('Card dispense completed:', obj);\r\n        return true;\r\n      case 'EjectMediaCompleted':\r\n        console.log('Card eject completed:', obj);\r\n        return true;\r\n      case 'RetractCardCompleted':\r\n        console.log('Card retract completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to dispense a card.\r\n   */\r\n  public dispense(): void {\r\n    this.sendCommand('DispenseCard');\r\n  }\r\n\r\n  /**\r\n   * A function to eject the card.\r\n   */\r\n  public eject(): void {\r\n    this.sendCommand('EjectCard');\r\n  }\r\n\r\n  /**\r\n   * A function to retract the card.\r\n   */\r\n  public retract(): void {\r\n    this.sendCommand('RetractCard');\r\n  }\r\n\r\n  /**\r\n   * A function to reset card dispenser device.\r\n   */\r\n  public reset(action: ResetActionType): void {\r\n    this.sendCommand('ResetDevice', { action });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of card dispenser device.\r\n   */\r\n  public getStatus(cardDispenserStatusEventCallback: (obj: CardDispenserStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'CardDispenserStatusResponse') {\r\n        cardDispenserStatusEventCallback(response as CardDispenserStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { BarcodeReaderStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the barcode reader device in an ATM.\r\n */\r\nexport default class BarcodeReader extends DeviceBase {\r\n  constructor() {\r\n    super('BarcodeReader');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ReadDataCompleted':\r\n        console.log('Barcode read completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to read barcode data.\r\n   */\r\n  public readData(timeout: number = 30000): void {\r\n    this.sendCommand('ReadData', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of barcode reader device.\r\n   */\r\n  public getStatus(barcodeReaderStatusEventCallback: (obj: BarcodeReaderStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'BarcodeReaderStatusResponse') {\r\n        barcodeReaderStatusEventCallback(response as BarcodeReaderStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { PassportScannerStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the passport scanner device in an ATM.\r\n */\r\nexport default class PassportScanner extends DeviceBase {\r\n  constructor() {\r\n    super('PassportScanner');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ReadImageCompleted':\r\n        console.log('Passport scan completed:', obj);\r\n        return true;\r\n      case 'ReadDataCompleted':\r\n        console.log('Passport data read completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to scan a passport.\r\n   */\r\n  public readImage(timeout: number = 30000): void {\r\n    this.sendCommand('ReadImage', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to read passport data.\r\n   */\r\n  public readData(timeout: number = 30000): void {\r\n    this.sendCommand('ReadData', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to eject the passport.\r\n   */\r\n  public ejectMedia(): void {\r\n    this.sendCommand('EjectMedia');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of passport scanner device.\r\n   */\r\n  public getStatus(passportScannerStatusEventCallback: (obj: PassportScannerStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'PassportScannerStatusResponse') {\r\n        passportScannerStatusEventCallback(response as PassportScannerStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { IDScannerStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the ID scanner device in an ATM.\r\n */\r\nexport default class IDScanner extends DeviceBase {\r\n  constructor() {\r\n    super('IDScanner');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ReadImageCompleted':\r\n        console.log('ID scan completed:', obj);\r\n        return true;\r\n      case 'ReadDataCompleted':\r\n        console.log('ID data read completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to scan an ID document.\r\n   */\r\n  public readImage(timeout: number = 30000): void {\r\n    this.sendCommand('ReadImage', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to read ID data.\r\n   */\r\n  public readData(timeout: number = 30000): void {\r\n    this.sendCommand('ReadData', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to eject the ID document.\r\n   */\r\n  public ejectMedia(): void {\r\n    this.sendCommand('EjectMedia');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of ID scanner device.\r\n   */\r\n  public getStatus(idScannerStatusEventCallback: (obj: IDScannerStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'IDScannerStatusResponse') {\r\n        idScannerStatusEventCallback(response as IDScannerStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { DocumentPrinterStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the document printer device in an ATM.\r\n */\r\nexport default class DocumentPrinter extends DeviceBase {\r\n  constructor() {\r\n    super('DocumentPrinter');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'PrintDataCompleted':\r\n        console.log('Document print completed:', obj);\r\n        return true;\r\n      case 'PrintImageCompleted':\r\n        console.log('Document image print completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to print on a document.\r\n   */\r\n  public printData(data: string[]): void {\r\n    this.sendCommand('PrintData', { data });\r\n  }\r\n\r\n  /**\r\n   * A function to print an image on a document.\r\n   */\r\n  public printImage(imageData: string): void {\r\n    this.sendCommand('PrintImage', { imageData });\r\n  }\r\n\r\n  /**\r\n   * A function to eject the document.\r\n   */\r\n  public ejectMedia(): void {\r\n    this.sendCommand('EjectMedia');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of document printer device.\r\n   */\r\n  public getStatus(documentPrinterStatusEventCallback: (obj: DocumentPrinterStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'DocumentPrinterStatusResponse') {\r\n        documentPrinterStatusEventCallback(response as DocumentPrinterStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { DocumentScannerStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the document scanner device in an ATM.\r\n */\r\nexport default class DocumentScanner extends DeviceBase {\r\n  constructor() {\r\n    super('DocumentScanner');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ReadImageCompleted':\r\n        console.log('Document scan completed:', obj);\r\n        return true;\r\n      case 'ReadDataCompleted':\r\n        console.log('Document data read completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to scan a document.\r\n   */\r\n  public readImage(timeout: number = 30000): void {\r\n    this.sendCommand('ReadImage', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to read document data.\r\n   */\r\n  public readData(timeout: number = 30000): void {\r\n    this.sendCommand('ReadData', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to eject the document.\r\n   */\r\n  public ejectMedia(): void {\r\n    this.sendCommand('EjectMedia');\r\n  }\r\n\r\n  /**\r\n   * A function to retain the document.\r\n   */\r\n  public retainMedia(): void {\r\n    this.sendCommand('RetainMedia');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of document scanner device.\r\n   */\r\n  public getStatus(documentScannerStatusEventCallback: (obj: DocumentScannerStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'DocumentScannerStatusResponse') {\r\n        documentScannerStatusEventCallback(response as DocumentScannerStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { FingerprintStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the fingerprint scanner device in an ATM.\r\n */\r\nexport default class Fingerprint extends DeviceBase {\r\n  constructor() {\r\n    super('Fingerprint');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'FingerprintReadCompleted':\r\n        console.log('Fingerprint scan completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to acquire fingerprint from customer.\r\n   */\r\n  public acquireFinger(timeout: number = 30000): void {\r\n    this.sendCommand('AcquireFinger', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to stop fingerprint acquisition.\r\n   */\r\n  public stopAcquireFinger(): void {\r\n    this.sendCommand('StopAcquireFinger');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of fingerprint device.\r\n   */\r\n  public getStatus(fingerprintStatusEventCallback: (obj: FingerprintStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'FingerprintStatusResponse') {\r\n        fingerprintStatusEventCallback(response as FingerprintStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { RFIDReaderStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the RFID reader device in an ATM.\r\n */\r\nexport default class RFIDReader extends DeviceBase {\r\n  constructor() {\r\n    super('RFIDReader');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ReadDataCompleted':\r\n        console.log('RFID read completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to read RFID data.\r\n   */\r\n  public readData(timeout: number = 30000): void {\r\n    this.sendCommand('ReadData', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of RFID reader device.\r\n   */\r\n  public getStatus(rfidReaderStatusEventCallback: (obj: RFIDReaderStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'RFIDReaderStatusResponse') {\r\n        rfidReaderStatusEventCallback(response as RFIDReaderStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { SignpadStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the signature pad device in an ATM.\r\n */\r\nexport default class Signpad extends DeviceBase {\r\n  constructor() {\r\n    super('Signpad');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'CaptureCompleted':\r\n        console.log('Signature capture completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to capture a signature.\r\n   */\r\n  public capture(params: { timeout: number; clearFirst?: boolean }): void {\r\n    this.sendCommand('Capture', params);\r\n  }\r\n\r\n  /**\r\n   * A function to clear the signature pad.\r\n   */\r\n  public clear(): void {\r\n    this.sendCommand('Clear');\r\n  }\r\n\r\n  /**\r\n   * A function to reset the signature pad.\r\n   */\r\n  public reset(): void {\r\n    this.sendCommand('Reset');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of signature pad device.\r\n   */\r\n  public getStatus(signpadStatusEventCallback: (obj: SignpadStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'SignpadStatusResponse') {\r\n        signpadStatusEventCallback(response as SignpadStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { PalmveinScannerStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the palm vein scanner device in an ATM.\r\n */\r\nexport default class PalmveinScanner extends DeviceBase {\r\n  constructor() {\r\n    super('PalmveinScanner');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ScanCompleted':\r\n        console.log('Palm vein scan completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to scan palm vein.\r\n   */\r\n  public scan(timeout: number = 30000): void {\r\n    this.sendCommand('Scan', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to reset the palm vein scanner.\r\n   */\r\n  public reset(): void {\r\n    this.sendCommand('Reset');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of palm vein scanner device.\r\n   */\r\n  public getStatus(palmveinScannerStatusEventCallback: (obj: PalmveinScannerStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'PalmveinScannerStatusResponse') {\r\n        palmveinScannerStatusEventCallback(response as PalmveinScannerStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { EKTPReaderStatusResponse } from '../models';\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the EKTP (Indonesian ID card) reader device in an ATM.\r\n */\r\nexport default class EKTPReader extends DeviceBase {\r\n  constructor() {\r\n    super('EKTPReader');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ReadDataCompleted':\r\n        console.log('EKTP read completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to read EKTP data.\r\n   */\r\n  public readData(timeout: number = 30000): void {\r\n    this.sendCommand('ReadData', { timeout });\r\n  }\r\n\r\n  /**\r\n   * A function to reset the EKTP reader.\r\n   */\r\n  public reset(): void {\r\n    this.sendCommand('Reset');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of EKTP reader device.\r\n   */\r\n  public getStatus(ektpReaderStatusEventCallback: (obj: EKTPReaderStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'EKTPReaderStatusResponse') {\r\n        ektpReaderStatusEventCallback(response as EKTPReaderStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { ChecksAcceptorStatusResponse } from '../models';\r\n\r\nexport interface AcceptChecksParams {\r\n  timeout?: number;\r\n  maxChecks?: number;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the checks acceptor device in an ATM.\r\n */\r\nexport default class ChecksAcceptor extends DeviceBase {\r\n  constructor() {\r\n    super('ChecksAcceptor');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'AcceptCompleted':\r\n        console.log('Checks accept completed:', obj);\r\n        return true;\r\n      case 'ReturnCompleted':\r\n        console.log('Checks return completed:', obj);\r\n        return true;\r\n      case 'RetractCompleted':\r\n        console.log('Checks retract completed:', obj);\r\n        return true;\r\n      case 'CommitCompleted':\r\n        console.log('Checks commit completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to accept checks.\r\n   */\r\n  public accept(params: AcceptChecksParams = {}): void {\r\n    this.sendCommand('Accept', params);\r\n  }\r\n\r\n  /**\r\n   * A function to return checks to customer.\r\n   */\r\n  public return(): void {\r\n    this.sendCommand('Return');\r\n  }\r\n\r\n  /**\r\n   * A function to retract checks.\r\n   */\r\n  public retract(): void {\r\n    this.sendCommand('Retract');\r\n  }\r\n\r\n  /**\r\n   * A function to commit the checks transaction.\r\n   */\r\n  public commit(): void {\r\n    this.sendCommand('Commit');\r\n  }\r\n\r\n  /**\r\n   * A function to reset the checks acceptor.\r\n   */\r\n  public reset(): void {\r\n    this.sendCommand('Reset');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of checks acceptor device.\r\n   */\r\n  public getStatus(checksAcceptorStatusEventCallback: (obj: ChecksAcceptorStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'ChecksAcceptorStatusResponse') {\r\n        checksAcceptorStatusEventCallback(response as ChecksAcceptorStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { VoiceGuidanceStatusResponse } from '../models';\r\n\r\nexport interface PlayVoiceParams {\r\n  text?: string;\r\n  audioFile?: string;\r\n  volume?: number;\r\n  repeat?: number;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the voice guidance device in an ATM.\r\n */\r\nexport default class VoiceGuidance extends DeviceBase {\r\n  constructor() {\r\n    super('VoiceGuidance');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'PlayCompleted':\r\n        console.log('Voice play completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to play voice guidance.\r\n   */\r\n  public play(params: PlayVoiceParams): void {\r\n    this.sendCommand('Play', params);\r\n  }\r\n\r\n  /**\r\n   * A function to stop voice guidance.\r\n   */\r\n  public stop(): void {\r\n    this.sendCommand('Stop');\r\n  }\r\n\r\n  /**\r\n   * A function to pause voice guidance.\r\n   */\r\n  public pause(): void {\r\n    this.sendCommand('Pause');\r\n  }\r\n\r\n  /**\r\n   * A function to resume voice guidance.\r\n   */\r\n  public resume(): void {\r\n    this.sendCommand('Resume');\r\n  }\r\n\r\n  /**\r\n   * A function to set the volume.\r\n   */\r\n  public setVolume(volume: number): void {\r\n    this.sendCommand('SetVolume', { volume });\r\n  }\r\n\r\n  /**\r\n   * A function to reset the voice guidance.\r\n   */\r\n  public reset(): void {\r\n    this.sendCommand('Reset');\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of voice guidance device.\r\n   */\r\n  public getStatus(voiceGuidanceStatusEventCallback: (obj: VoiceGuidanceStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'VoiceGuidanceStatusResponse') {\r\n        voiceGuidanceStatusEventCallback(response as VoiceGuidanceStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\nimport { TerminalStatusResponse } from '../models';\r\n\r\nexport interface TerminalInfoParams {\r\n  terminalId?: string;\r\n  institutionId?: string;\r\n  applicationId?: string;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class controls the terminal information and management.\r\n */\r\nexport default class Terminal extends DeviceBase {\r\n  constructor() {\r\n    super('Terminal');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'InitializeCompleted':\r\n        console.log('Terminal initialize completed:', obj);\r\n        return true;\r\n      case 'ShutdownCompleted':\r\n        console.log('Terminal shutdown completed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to initialize the terminal.\r\n   */\r\n  public initialize(params: TerminalInfoParams = {}): void {\r\n    this.sendCommand('Initialize', params);\r\n  }\r\n\r\n  /**\r\n   * A function to shutdown the terminal.\r\n   */\r\n  public shutdown(): void {\r\n    this.sendCommand('Shutdown');\r\n  }\r\n\r\n  /**\r\n   * A function to restart the terminal.\r\n   */\r\n  public restart(): void {\r\n    this.sendCommand('Restart');\r\n  }\r\n\r\n  /**\r\n   * A function to get terminal information.\r\n   */\r\n  public getInfo(): void {\r\n    this.sendCommand('GetInfo');\r\n  }\r\n\r\n  /**\r\n   * A function to set terminal information.\r\n   */\r\n  public setInfo(params: TerminalInfoParams): void {\r\n    this.sendCommand('SetInfo', params);\r\n  }\r\n\r\n  /**\r\n   * A function to get the status information of terminal.\r\n   */\r\n  public getStatus(terminalStatusEventCallback: (obj: TerminalStatusResponse) => void): void {\r\n    const statusListener = (response: any) => {\r\n      if (response.Command === 'TerminalStatusResponse') {\r\n        terminalStatusEventCallback(response as TerminalStatusResponse);\r\n      }\r\n    };\r\n\r\n    this.addListener(statusListener);\r\n    this.sendCommand('GetStatus');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\n\r\nexport interface TransactionParams {\r\n  transactionId: string;\r\n  amount?: number;\r\n  currency?: string;\r\n  account?: string;\r\n  reference?: string;\r\n}\r\n\r\nexport interface TransactionResult {\r\n  transactionId: string;\r\n  status: string;\r\n  amount?: number;\r\n  reference?: string;\r\n  timestamp: string;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class handles transaction processing and management.\r\n */\r\nexport default class Transaction extends DeviceBase {\r\n  constructor() {\r\n    super('Transaction');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'TransactionCompleted':\r\n        console.log('Transaction completed:', obj);\r\n        return true;\r\n      case 'TransactionCancelled':\r\n        console.log('Transaction cancelled:', obj);\r\n        return true;\r\n      case 'TransactionFailed':\r\n        console.log('Transaction failed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to start a transaction.\r\n   */\r\n  public start(params: TransactionParams): void {\r\n    this.sendCommand('Start', params);\r\n  }\r\n\r\n  /**\r\n   * A function to commit a transaction.\r\n   */\r\n  public commit(transactionId: string): void {\r\n    this.sendCommand('Commit', { transactionId });\r\n  }\r\n\r\n  /**\r\n   * A function to rollback a transaction.\r\n   */\r\n  public rollback(transactionId: string): void {\r\n    this.sendCommand('Rollback', { transactionId });\r\n  }\r\n\r\n  /**\r\n   * A function to cancel a transaction.\r\n   */\r\n  public cancel(transactionId: string): void {\r\n    this.sendCommand('Cancel', { transactionId });\r\n  }\r\n\r\n  /**\r\n   * A function to get transaction status.\r\n   */\r\n  public getTransactionStatus(transactionId: string): void {\r\n    this.sendCommand('GetTransactionStatus', { transactionId });\r\n  }\r\n\r\n  /**\r\n   * A function to get transaction history.\r\n   */\r\n  public getHistory(params: { limit?: number; offset?: number } = {}): void {\r\n    this.sendCommand('GetHistory', params);\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\n\r\nexport interface NDCCommand {\r\n  command: string;\r\n  data?: any;\r\n}\r\n\r\nexport interface NDCState {\r\n  stateNumber: string;\r\n  nextState?: string;\r\n  screenData?: string;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class handles NDC (Network Data Communication) protocol for ATM communication.\r\n */\r\nexport default class NDC extends DeviceBase {\r\n  constructor() {\r\n    super('NDC');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'NDCCommandReceived':\r\n        console.log('NDC command received:', obj);\r\n        return true;\r\n      case 'NDCStateChanged':\r\n        console.log('NDC state changed:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to send NDC command.\r\n   */\r\n  public sendNDCCommand(command: NDCCommand): void {\r\n    this.sendCommand('SendNDCCommand', command);\r\n  }\r\n\r\n  /**\r\n   * A function to set NDC state.\r\n   */\r\n  public setState(state: NDCState): void {\r\n    this.sendCommand('SetState', state);\r\n  }\r\n\r\n  /**\r\n   * A function to get current NDC state.\r\n   */\r\n  public getState(): void {\r\n    this.sendCommand('GetState');\r\n  }\r\n\r\n  /**\r\n   * A function to process NDC message.\r\n   */\r\n  public processMessage(message: string): void {\r\n    this.sendCommand('ProcessMessage', { message });\r\n  }\r\n\r\n  /**\r\n   * A function to initialize NDC communication.\r\n   */\r\n  public initialize(): void {\r\n    this.sendCommand('Initialize');\r\n  }\r\n\r\n  /**\r\n   * A function to terminate NDC communication.\r\n   */\r\n  public terminate(): void {\r\n    this.sendCommand('Terminate');\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\n\r\nexport interface DeviceEventData {\r\n  deviceType: string;\r\n  eventType: string;\r\n  timestamp: string;\r\n  data?: any;\r\n}\r\n\r\nexport interface EventFilter {\r\n  deviceTypes?: string[];\r\n  eventTypes?: string[];\r\n  startTime?: string;\r\n  endTime?: string;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class handles device events and event management across all ATM devices.\r\n */\r\nexport default class DeviceEvent extends DeviceBase {\r\n  constructor() {\r\n    super('DeviceEvent');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'DeviceEventOccurred':\r\n        console.log('Device event occurred:', obj);\r\n        return true;\r\n      case 'EventFilterUpdated':\r\n        console.log('Event filter updated:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to subscribe to device events.\r\n   */\r\n  public subscribe(filter: EventFilter = {}): void {\r\n    this.sendCommand('Subscribe', filter);\r\n  }\r\n\r\n  /**\r\n   * A function to unsubscribe from device events.\r\n   */\r\n  public unsubscribe(): void {\r\n    this.sendCommand('Unsubscribe');\r\n  }\r\n\r\n  /**\r\n   * A function to get event history.\r\n   */\r\n  public getEventHistory(filter: EventFilter = {}): void {\r\n    this.sendCommand('GetEventHistory', filter);\r\n  }\r\n\r\n  /**\r\n   * A function to clear event history.\r\n   */\r\n  public clearEventHistory(): void {\r\n    this.sendCommand('ClearEventHistory');\r\n  }\r\n\r\n  /**\r\n   * A function to set event filter.\r\n   */\r\n  public setEventFilter(filter: EventFilter): void {\r\n    this.sendCommand('SetEventFilter', filter);\r\n  }\r\n\r\n  /**\r\n   * A function to get current event filter.\r\n   */\r\n  public getEventFilter(): void {\r\n    this.sendCommand('GetEventFilter');\r\n  }\r\n\r\n  /**\r\n   * A function to trigger a custom device event.\r\n   */\r\n  public triggerEvent(eventData: DeviceEventData): void {\r\n    this.sendCommand('TriggerEvent', eventData);\r\n  }\r\n}\r\n","import DeviceBase from './DeviceBase';\r\n\r\nexport interface ConfigurationParams {\r\n  key: string;\r\n  value: any;\r\n  scope?: 'global' | 'device' | 'session';\r\n}\r\n\r\nexport interface LogParams {\r\n  level: 'debug' | 'info' | 'warn' | 'error';\r\n  message: string;\r\n  category?: string;\r\n  metadata?: any;\r\n}\r\n\r\n/**\r\n * @group API\r\n * @description This class provides common utility functions and shared functionality across all ATM devices.\r\n */\r\nexport default class Common extends DeviceBase {\r\n  constructor() {\r\n    super('Common');\r\n  }\r\n\r\n  protected othersEventCallback(obj: any): boolean {\r\n    switch (obj.Command) {\r\n      case 'ConfigurationUpdated':\r\n        console.log('Configuration updated:', obj);\r\n        return true;\r\n      case 'LogEntryAdded':\r\n        console.log('Log entry added:', obj);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to get configuration value.\r\n   */\r\n  public getConfiguration(key: string, scope: string = 'global'): void {\r\n    this.sendCommand('GetConfiguration', { key, scope });\r\n  }\r\n\r\n  /**\r\n   * A function to set configuration value.\r\n   */\r\n  public setConfiguration(params: ConfigurationParams): void {\r\n    this.sendCommand('SetConfiguration', params);\r\n  }\r\n\r\n  /**\r\n   * A function to get all configurations.\r\n   */\r\n  public getAllConfigurations(scope: string = 'global'): void {\r\n    this.sendCommand('GetAllConfigurations', { scope });\r\n  }\r\n\r\n  /**\r\n   * A function to log a message.\r\n   */\r\n  public log(params: LogParams): void {\r\n    this.sendCommand('Log', params);\r\n  }\r\n\r\n  /**\r\n   * A function to get system information.\r\n   */\r\n  public getSystemInfo(): void {\r\n    this.sendCommand('GetSystemInfo');\r\n  }\r\n\r\n  /**\r\n   * A function to get device list.\r\n   */\r\n  public getDeviceList(): void {\r\n    this.sendCommand('GetDeviceList');\r\n  }\r\n\r\n  /**\r\n   * A function to get application version.\r\n   */\r\n  public getVersion(): void {\r\n    this.sendCommand('GetVersion');\r\n  }\r\n\r\n  /**\r\n   * A function to perform health check.\r\n   */\r\n  public healthCheck(): void {\r\n    this.sendCommand('HealthCheck');\r\n  }\r\n\r\n  /**\r\n   * A function to get timestamp.\r\n   */\r\n  public getTimestamp(): void {\r\n    this.sendCommand('GetTimestamp');\r\n  }\r\n\r\n  /**\r\n   * A function to generate UUID.\r\n   */\r\n  public generateUUID(): void {\r\n    this.sendCommand('GenerateUUID');\r\n  }\r\n}\r\n","// Core enums based on the original @warp/api2 analysis\r\n\r\nexport enum DeviceStatus {\r\n  ONLINE = 'ONLINE',\r\n  POWEREDOFF = 'POWEREDOFF',\r\n  NODEVICE = 'NODEVICE',\r\n  HWERROR = 'HWERROR',\r\n  NOCARD = 'NOCARD',\r\n  NOTSUPP = 'NOTSUPP',\r\n  UNKNOWN = 'UNKNOWN'\r\n}\r\n\r\nexport enum ResponseDetailInfo {\r\n  OK = 'OK',\r\n  ERROR = 'ERROR',\r\n  FULL = 'FULL',\r\n  RETRACTCASH = 'OK|RETRACTED_CASH',\r\n  TIMEOUT = 'TIMEOUT',\r\n  PRESENT = 'PRESENT',\r\n  NOTPRESENT = 'NOTPRESENT',\r\n  CANCELLED = 'CANCELLED',\r\n  INCORRECTPIN = 'INCORRECTPIN',\r\n  MISMATCHPIN = 'MISMATCHPIN',\r\n  RETRACT = 'RETRACT',\r\n  REFUSED = 'REFUSED',\r\n  WRONGPIN = 'WRONGPIN3TIMES',\r\n  INSUFFICIENTBALANCE = 'INSUFFICIENTBALANCE'\r\n}\r\n\r\nexport enum ResetActionType {\r\n  RETAIN = 'RETAIN',\r\n  EJECT = 'EJECT'\r\n}\r\n\r\nexport enum ServiceState {\r\n  OFFLINE = 'OFFLINE',\r\n  INSERVICE = 'IN_SERVICE',\r\n  INSUPERVISOR = 'IN_SUPERVISOR',\r\n  OUTOFSERVICE = 'OUT_OF_SERVICE',\r\n  PENDING = 'PENDING'\r\n}\r\n\r\nexport enum WebSocketEvents {\r\n  WebSocketConnectionEvent = 'SubscribeEvents|webSocketConnectionEvent',\r\n  OnConnectToWARPCore = 'OnConnectToWARPCore',\r\n  OnDisconnectToWARPCore = 'OnDisconnectToWARPCore'\r\n}\r\n\r\nexport enum CoreAPIResponseCommand {\r\n  TaskResponse = 'TaskResponse',\r\n  ModeResponse = 'ModeResponse',\r\n  CardReadCompleted = 'CardReadCompleted',\r\n  PinEntryCompleted = 'PinEntryCompleted',\r\n  ItemsPresented = 'ItemsPresented',\r\n  DispenseNoteCompleted = 'DispenseNoteCompleted',\r\n  ItemsTaken = 'ItemsTaken',\r\n  TaskCompleted = 'TaskCompleted',\r\n  TaskCanceled = 'TaskCanceled',\r\n  TaskTimeout = 'TaskTimeout',\r\n  TaskError = 'TaskError',\r\n  PrintCompleted = 'PrintCompleted',\r\n  EjectMediaCompleted = 'EjectMediaCompleted',\r\n  ResetDeviceCompleted = 'ResetDeviceCompleted',\r\n  AuthorizationResponse = 'AuthorizationResponse',\r\n  TransactionReady = 'TransactionReady'\r\n}\r\n\r\nexport enum DeviceName {\r\n  CardReader = 'CardReader',\r\n  CashDispenser = 'CashDispenser',\r\n  CashAcceptor = 'CashAcceptor',\r\n  ReceiptPrinter = 'ReceiptPrinter',\r\n  PinPad = 'PinPad',\r\n  Camera = 'Camera',\r\n  Fingerprint = 'Fingerprint',\r\n  BarcodeReader = 'BarcodeReader'\r\n}\r\n\r\nexport enum StringBoolean {\r\n  True = 'True',\r\n  False = 'False'\r\n}\r\n\r\nexport enum MediaStatus {\r\n  PRESENT = 'PRESENT',\r\n  NOTPRESENT = 'NOTPRESENT',\r\n  JAMMED = 'JAMMED',\r\n  ENTERING = 'ENTERING',\r\n  UNKNOWN = 'UNKNOWN',\r\n  EXITING = 'EXITING'\r\n}\r\n","import { DeviceStatus, StringBoolean, ResponseDetailInfo } from '../enums';\r\n\r\nexport abstract class AbstractResponse {\r\n  public Command: string;\r\n  public Detail: ResponseDetailInfo;\r\n  public RequestId: string;\r\n  public Timestamp: Date;\r\n\r\n  constructor(command: string, detail: ResponseDetailInfo = ResponseDetailInfo.OK) {\r\n    this.Command = command;\r\n    this.Detail = detail;\r\n    this.RequestId = '';\r\n    this.Timestamp = new Date();\r\n  }\r\n}\r\n\r\nexport class TaskResponse extends AbstractResponse {\r\n  constructor(command: string, detail: ResponseDetailInfo = ResponseDetailInfo.OK) {\r\n    super(command, detail);\r\n  }\r\n}\r\n\r\nexport class AbstractDeviceStatusResponse extends TaskResponse {\r\n  public DeviceStatus: DeviceStatus;\r\n  public IsAvailable: StringBoolean | null;\r\n  public ExtraStatuses: Array<ExtraStatus>;\r\n\r\n  constructor(command: string) {\r\n    super(command);\r\n    this.DeviceStatus = DeviceStatus.UNKNOWN;\r\n    this.IsAvailable = null;\r\n    this.ExtraStatuses = [];\r\n  }\r\n}\r\n\r\nexport class ExtraStatus {\r\n  public Key: string;\r\n  public Value: string;\r\n\r\n  constructor(key: string, value: string) {\r\n    this.Key = key;\r\n    this.Value = value;\r\n  }\r\n}\r\n\r\nexport class ReceiptPrinterStatusResponse extends AbstractDeviceStatusResponse {\r\n  constructor() {\r\n    super('ReceiptPrinterStatusResponse');\r\n  }\r\n}\r\n\r\nexport class CashDispenserStatusResponse extends AbstractDeviceStatusResponse {\r\n  public CassetteStatus: string;\r\n  public StackerStatus: string;\r\n  \r\n  constructor() {\r\n    super('CashDispenserStatusResponse');\r\n    this.CassetteStatus = '';\r\n    this.StackerStatus = '';\r\n  }\r\n}\r\n\r\nexport class CashAcceptorStatusResponse extends AbstractDeviceStatusResponse {\r\n  public AcceptorStatus: string;\r\n  public StackerStatus: string;\r\n  \r\n  constructor() {\r\n    super('CashAcceptorStatusResponse');\r\n    this.AcceptorStatus = '';\r\n    this.StackerStatus = '';\r\n  }\r\n}\r\n\r\nexport class PinPadStatusResponse extends AbstractDeviceStatusResponse {\r\n  public EncryptionStatus: string;\r\n  \r\n  constructor() {\r\n    super('PinPadStatusResponse');\r\n    this.EncryptionStatus = '';\r\n  }\r\n}\r\n\r\nexport class CameraStatusResponse extends AbstractDeviceStatusResponse {\r\n  public CameraStatus: string;\r\n  \r\n  constructor() {\r\n    super('CameraStatusResponse');\r\n    this.CameraStatus = '';\r\n  }\r\n}\r\n\r\nexport class CardDispenserStatusResponse extends AbstractDeviceStatusResponse {\r\n  public MediaStatus: string;\r\n  \r\n  constructor() {\r\n    super('CardDispenserStatusResponse');\r\n    this.MediaStatus = '';\r\n  }\r\n}\r\n\r\nexport class BarcodeReaderStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ScannerStatus: string;\r\n  \r\n  constructor() {\r\n    super('BarcodeReaderStatusResponse');\r\n    this.ScannerStatus = '';\r\n  }\r\n}\r\n\r\nexport class FingerprintStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ScannerStatus: string;\r\n  \r\n  constructor() {\r\n    super('FingerprintStatusResponse');\r\n    this.ScannerStatus = '';\r\n  }\r\n}\r\n\r\nexport class DocumentScannerStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ScannerStatus: string;\r\n  \r\n  constructor() {\r\n    super('DocumentScannerStatusResponse');\r\n    this.ScannerStatus = '';\r\n  }\r\n}\r\n\r\nexport class DocumentPrinterStatusResponse extends AbstractDeviceStatusResponse {\r\n  public PrinterStatus: string;\r\n  \r\n  constructor() {\r\n    super('DocumentPrinterStatusResponse');\r\n    this.PrinterStatus = '';\r\n  }\r\n}\r\n\r\nexport class IDScannerStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ScannerStatus: string;\r\n  \r\n  constructor() {\r\n    super('IDScannerStatusResponse');\r\n    this.ScannerStatus = '';\r\n  }\r\n}\r\n\r\nexport class PassportScannerStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ScannerStatus: string;\r\n  \r\n  constructor() {\r\n    super('PassportScannerStatusResponse');\r\n    this.ScannerStatus = '';\r\n  }\r\n}\r\n\r\nexport class RFIDReaderStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ReaderStatus: string;\r\n  \r\n  constructor() {\r\n    super('RFIDReaderStatusResponse');\r\n    this.ReaderStatus = '';\r\n  }\r\n}\r\n\r\nexport class SignpadStatusResponse extends AbstractDeviceStatusResponse {\r\n  public PadStatus: string;\r\n  \r\n  constructor() {\r\n    super('SignpadStatusResponse');\r\n    this.PadStatus = '';\r\n  }\r\n}\r\n\r\nexport class PalmveinScannerStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ScannerStatus: string;\r\n  \r\n  constructor() {\r\n    super('PalmveinScannerStatusResponse');\r\n    this.ScannerStatus = '';\r\n  }\r\n}\r\n\r\nexport class EKTPReaderStatusResponse extends AbstractDeviceStatusResponse {\r\n  public ReaderStatus: string;\r\n  \r\n  constructor() {\r\n    super('EKTPReaderStatusResponse');\r\n    this.ReaderStatus = '';\r\n  }\r\n}\r\n\r\nexport class ChecksAcceptorStatusResponse extends AbstractDeviceStatusResponse {\r\n  public AcceptorStatus: string;\r\n  \r\n  constructor() {\r\n    super('ChecksAcceptorStatusResponse');\r\n    this.AcceptorStatus = '';\r\n  }\r\n}\r\n\r\nexport class VoiceGuidanceStatusResponse extends AbstractDeviceStatusResponse {\r\n  public SpeakerStatus: string;\r\n  \r\n  constructor() {\r\n    super('VoiceGuidanceStatusResponse');\r\n    this.SpeakerStatus = '';\r\n  }\r\n}\r\n\r\nexport class TerminalStatusResponse extends AbstractDeviceStatusResponse {\r\n  public TerminalStatus: string;\r\n  public ConnectionStatus: string;\r\n  \r\n  constructor() {\r\n    super('TerminalStatusResponse');\r\n    this.TerminalStatus = '';\r\n    this.ConnectionStatus = '';\r\n  }\r\n}\r\n\r\nexport class CardReaderStatusResponse extends AbstractDeviceStatusResponse {\r\n  public MediaStatus: string;\r\n  public ChipStatus: string;\r\n  \r\n  constructor() {\r\n    super('CardReaderStatusResponse');\r\n    this.MediaStatus = '';\r\n    this.ChipStatus = '';\r\n  }\r\n}\r\n\r\nexport class AuthorizationResponse extends TaskResponse {\r\n  public Machine: string;\r\n  public Code: string;\r\n\r\n  constructor() {\r\n    super('AuthorizationResponse');\r\n    this.Machine = '';\r\n    this.Code = '';\r\n  }\r\n}\r\n","import CryptoJS from 'crypto-js';\r\nimport { JSEncrypt } from 'jsencrypt';\r\n\r\nexport class EncryptionInfo {\r\n  private static instance: EncryptionInfo;\r\n  \r\n  public isEncryptionMode: boolean = false;\r\n  public token: string | null = null;\r\n  public publicKey: string | null = null;\r\n  public aesKeySeed: string | null = null;\r\n  public aesIVSeed: string | null = null;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): EncryptionInfo {\r\n    if (!EncryptionInfo.instance) {\r\n      EncryptionInfo.instance = new EncryptionInfo();\r\n    }\r\n    return EncryptionInfo.instance;\r\n  }\r\n}\r\n\r\nexport class EncryptionHelper {\r\n  private encryptionInfo: EncryptionInfo;\r\n\r\n  constructor() {\r\n    this.encryptionInfo = EncryptionInfo.getInstance();\r\n  }\r\n\r\n  // RSA Encryption\r\n  public encryptRSA(data: string, publicKey?: string): string {\r\n    const encrypt = new JSEncrypt();\r\n    encrypt.setPublicKey(publicKey || this.encryptionInfo.publicKey || '');\r\n    return encrypt.encrypt(data) || '';\r\n  }\r\n\r\n  // AES Encryption\r\n  public encryptAES(data: string, key?: string, iv?: string): string {\r\n    const keyToUse = key || this.encryptionInfo.aesKeySeed || '';\r\n    const ivToUse = iv || this.encryptionInfo.aesIVSeed || '';\r\n    \r\n    const encrypted = CryptoJS.AES.encrypt(data, keyToUse, {\r\n      iv: CryptoJS.enc.Utf8.parse(ivToUse),\r\n      mode: CryptoJS.mode.CBC,\r\n      padding: CryptoJS.pad.Pkcs7\r\n    });\r\n    \r\n    return encrypted.toString();\r\n  }\r\n\r\n  // AES Decryption\r\n  public decryptAES(encryptedData: string, key?: string, iv?: string): string {\r\n    const keyToUse = key || this.encryptionInfo.aesKeySeed || '';\r\n    const ivToUse = iv || this.encryptionInfo.aesIVSeed || '';\r\n    \r\n    const decrypted = CryptoJS.AES.decrypt(encryptedData, keyToUse, {\r\n      iv: CryptoJS.enc.Utf8.parse(ivToUse),\r\n      mode: CryptoJS.mode.CBC,\r\n      padding: CryptoJS.pad.Pkcs7\r\n    });\r\n    \r\n    return decrypted.toString(CryptoJS.enc.Utf8);\r\n  }\r\n\r\n  // MD5 Hash\r\n  public md5Hash(data: string): string {\r\n    return CryptoJS.MD5(data).toString();\r\n  }\r\n\r\n  // SHA256 Hash\r\n  public sha256Hash(data: string): string {\r\n    return CryptoJS.SHA256(data).toString();\r\n  }\r\n\r\n  // Generate random key\r\n  public generateRandomKey(length: number = 32): string {\r\n    return CryptoJS.lib.WordArray.random(length).toString();\r\n  }\r\n}\r\n","import { ConfigType } from '../types';\r\nimport { WebSocketEvents, ServiceState } from '../enums';\r\nimport { EventBusHandler, MessageFormat, WARPJsonFormat, generateUUID } from '../utils';\r\n\r\nexport class WebSocketClient {\r\n  private ws: WebSocket | null = null;\r\n  private eventHandler: EventBusHandler;\r\n  private config: ConfigType;\r\n  private reconnectAttempts: number = 0;\r\n  private maxReconnectAttempts: number = 5;\r\n  private reconnectInterval: number = 3000;\r\n  private isConnected: boolean = false;\r\n\r\n  constructor(config: ConfigType, eventHandler: EventBusHandler) {\r\n    this.config = config;\r\n    this.eventHandler = eventHandler;\r\n  }\r\n\r\n  public connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const url = this.buildWebSocketUrl();\r\n      \r\n      try {\r\n        this.ws = new WebSocket(url);\r\n        \r\n        this.ws.onopen = (event) => {\r\n          this.isConnected = true;\r\n          this.reconnectAttempts = 0;\r\n          console.log('WebSocket connected successfully');\r\n          this.eventHandler.sendEvent(WebSocketEvents.OnConnectToWARPCore, event);\r\n          resolve();\r\n        };\r\n\r\n        this.ws.onmessage = (event) => {\r\n          this.handleMessage(event.data);\r\n        };\r\n\r\n        this.ws.onclose = (event) => {\r\n          this.isConnected = false;\r\n          console.log('WebSocket connection closed');\r\n          this.eventHandler.sendEvent(WebSocketEvents.OnDisconnectToWARPCore, event);\r\n          this.attemptReconnect();\r\n        };\r\n\r\n        this.ws.onerror = (error) => {\r\n          console.error('WebSocket error:', error);\r\n          reject(error);\r\n        };\r\n\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  public disconnect(): void {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  public send(message: any): void {\r\n    if (this.ws && this.isConnected) {\r\n      const formattedMessage = this.formatMessage(message);\r\n      this.ws.send(JSON.stringify(formattedMessage));\r\n    } else {\r\n      console.error('WebSocket not connected');\r\n    }\r\n  }\r\n\r\n  public getConnectionStatus(): boolean {\r\n    return this.isConnected;\r\n  }\r\n\r\n  private buildWebSocketUrl(): string {\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const host = this.config.webSocketUrl || '127.0.0.1';\r\n    const port = this.config.webSocketPort || '9091';\r\n    return `${protocol}//${host}:${port}`;\r\n  }\r\n\r\n  private handleMessage(data: string): void {\r\n    try {\r\n      const message = JSON.parse(data);\r\n      \r\n      // Decrypt if needed\r\n      if (this.config.isEncryptionMode && message.IsEncrypt) {\r\n        // Handle decryption here\r\n        console.log('Decrypting message...');\r\n      }\r\n\r\n      // Route message to appropriate handler\r\n      this.routeMessage(message);\r\n      \r\n    } catch (error) {\r\n      console.error('Error parsing WebSocket message:', error);\r\n    }\r\n  }\r\n\r\n  private routeMessage(message: any): void {\r\n    if (message.Command) {\r\n      this.eventHandler.sendEvent(message.Command, message);\r\n    }\r\n    \r\n    // General message event\r\n    this.eventHandler.sendEvent('message', message);\r\n  }\r\n\r\n  private formatMessage(payload: any): MessageFormat {\r\n    const header = payload.Command || 'Unknown';\r\n    const isEncrypt = this.config.isEncryptionMode || false;\r\n    const token = ''; // Get from encryption service\r\n    \r\n    return new MessageFormat(header, payload, isEncrypt, token);\r\n  }\r\n\r\n  private attemptReconnect(): void {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      \r\n      setTimeout(() => {\r\n        this.connect().catch(error => {\r\n          console.error('Reconnection failed:', error);\r\n        });\r\n      }, this.reconnectInterval);\r\n    } else {\r\n      console.error('Max reconnection attempts reached');\r\n    }\r\n  }\r\n}\r\n","import { ConfigType } from '../types';\r\nimport { WebSocketClient } from '../websocket';\r\nimport { EventBusHandler } from '../utils';\r\nimport { EncryptionInfo } from '../encryption';\r\n\r\n/**\r\n * Main initialization class for the ATM Device API\r\n * This class handles WebSocket connection setup and device configuration\r\n */\r\nexport default class ATMDeviceAPI {\r\n  private static webSocketClient: WebSocketClient | null = null;\r\n  private static eventHandler: EventBusHandler | null = null;\r\n  private static encryptionInfo: EncryptionInfo | null = null;\r\n\r\n  /**\r\n   * Initialize the ATM Device API with configuration\r\n   * @param config - Configuration object with WebSocket and encryption settings\r\n   * @param config.isEncryptionMode - Enable encryption mode (default: true)\r\n   * @param config.webSocketUrl - WebSocket server URL (default: '127.0.0.1')\r\n   * @param config.webSocketPort - WebSocket server port (default: '9091' or '443')\r\n   */\r\n  public static async init(config: ConfigType = {}): Promise<void> {\r\n    // Set default configuration\r\n    const defaultConfig: ConfigType = {\r\n      isEncryptionMode: true,\r\n      webSocketUrl: '127.0.0.1',\r\n      webSocketPort: '9091',\r\n      ...config\r\n    };\r\n\r\n    // Initialize encryption\r\n    ATMDeviceAPI.encryptionInfo = EncryptionInfo.getInstance();\r\n    ATMDeviceAPI.encryptionInfo.isEncryptionMode = defaultConfig.isEncryptionMode || false;\r\n\r\n    // Initialize event handler\r\n    ATMDeviceAPI.eventHandler = new EventBusHandler();\r\n\r\n    // Initialize WebSocket client\r\n    ATMDeviceAPI.webSocketClient = new WebSocketClient(defaultConfig, ATMDeviceAPI.eventHandler);\r\n\r\n    try {\r\n      // Connect to WebSocket server\r\n      await ATMDeviceAPI.webSocketClient.connect();\r\n      console.log('ATM Device API initialized successfully');\r\n    } catch (error) {\r\n      console.error('Failed to initialize ATM Device API:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the WebSocket client instance\r\n   */\r\n  public static getWebSocketClient(): WebSocketClient | null {\r\n    return ATMDeviceAPI.webSocketClient;\r\n  }\r\n\r\n  /**\r\n   * Get the event handler instance\r\n   */\r\n  public static getEventHandler(): EventBusHandler | null {\r\n    return ATMDeviceAPI.eventHandler;\r\n  }\r\n\r\n  /**\r\n   * Get the encryption info instance\r\n   */\r\n  public static getEncryptionInfo(): EncryptionInfo | null {\r\n    return ATMDeviceAPI.encryptionInfo;\r\n  }\r\n\r\n  /**\r\n   * Disconnect and cleanup resources\r\n   */\r\n  public static disconnect(): void {\r\n    if (ATMDeviceAPI.webSocketClient) {\r\n      ATMDeviceAPI.webSocketClient.disconnect();\r\n      ATMDeviceAPI.webSocketClient = null;\r\n    }\r\n\r\n    if (ATMDeviceAPI.eventHandler) {\r\n      ATMDeviceAPI.eventHandler.removeAllEventListener();\r\n      ATMDeviceAPI.eventHandler = null;\r\n    }\r\n\r\n    ATMDeviceAPI.encryptionInfo = null;\r\n    console.log('ATM Device API disconnected');\r\n  }\r\n\r\n  /**\r\n   * Check if the API is connected\r\n   */\r\n  public static isConnected(): boolean {\r\n    return ATMDeviceAPI.webSocketClient?.getConnectionStatus() || false;\r\n  }\r\n}\r\n"],"names":["EventBus","events","on","eventName","callback","push","emit","args","callbacks","length","off","i","splice","offAll","Object","keys","forEach","EventBusHandler","constructor","eventBus","sendEvent","addEventListener","removeExisting","removeEventListener","removeAllEventListener","MessageFormat","header","payload","isEncrypt","token","Header","Payload","IsEncrypt","Token","WARPJsonFormat","name","tag","dataParameter","Name","Tag","DataParameter","Caller","callBack","generateUUID","uuidv4","DeviceBase","dataCallback","className","eventHandler","addListener","removeListener","sendCommand","command","parameters","message","Command","RequestId","DeviceName","Timestamp","Date","toISOString","console","log","simulateCommand","setTimeout","response","Detail","handleResponse","handled","othersEventCallback","ReceiptPrinter","obj","print","printData","skipPrintHeaderImage","headerImageData","taillmageData","printWithEject","eject","reset","action","getStatus","receiptPrinterStatusEventCallback","statusListener","CashDispenser","dispenseByAmount","amount","takeNoteTimeout","present","dispenseByCount","count","retractNote","cashDispenserStatusEventCallback","isAmountDispensable","isCountDispensable","counts","presentNote","timeout","CardReader","readCard","tracks","ejectCard","retractCard","initializeChip","cardReaderStatusEventCallback","chipPowerOn","chipPowerOff","chipIO","apduCommand","CashAcceptor","acceptCash","denominationList","currencyID","maxCount","maxAmount","insertNoteTimeout","accept","Array","from","_","returnCash","return","retractCash","retract","commit","cancel","cashAcceptorStatusEventCallback","PinPad","inputPIN","minDigits","maxDigits","autoEnd","inputData","activeKeys","terminateKeys","pinPadStatusEventCallback","Camera","capture","cameraType","fileName","textOnImage","cameraStatusEventCallback","CardDispenser","dispense","cardDispenserStatusEventCallback","BarcodeReader","readData","barcodeReaderStatusEventCallback","PassportScanner","readImage","ejectMedia","passportScannerStatusEventCallback","IDScanner","idScannerStatusEventCallback","DocumentPrinter","data","printImage","imageData","documentPrinterStatusEventCallback","DocumentScanner","retainMedia","documentScannerStatusEventCallback","Fingerprint","acquireFinger","stopAcquireFinger","fingerprintStatusEventCallback","RFIDReader","rfidReaderStatusEventCallback","Signpad","params","clear","signpadStatusEventCallback","PalmveinScanner","scan","palmveinScannerStatusEventCallback","EKTPReader","ektpReaderStatusEventCallback","ChecksAcceptor","checksAcceptorStatusEventCallback","VoiceGuidance","play","stop","pause","resume","setVolume","volume","voiceGuidanceStatusEventCallback","Terminal","initialize","shutdown","restart","getInfo","setInfo","terminalStatusEventCallback","Transaction","start","transactionId","rollback","getTransactionStatus","getHistory","NDC","sendNDCCommand","setState","state","getState","processMessage","terminate","DeviceEvent","subscribe","filter","unsubscribe","getEventHistory","clearEventHistory","setEventFilter","getEventFilter","triggerEvent","eventData","Common","getConfiguration","key","scope","setConfiguration","getAllConfigurations","getSystemInfo","getDeviceList","getVersion","healthCheck","getTimestamp","DeviceStatus","ResponseDetailInfo","ResetActionType","ServiceState","WebSocketEvents","CoreAPIResponseCommand","StringBoolean","MediaStatus","AbstractResponse","detail","OK","TaskResponse","AbstractDeviceStatusResponse","UNKNOWN","IsAvailable","ExtraStatuses","ExtraStatus","value","Key","Value","ReceiptPrinterStatusResponse","CashDispenserStatusResponse","CassetteStatus","StackerStatus","CashAcceptorStatusResponse","AcceptorStatus","PinPadStatusResponse","EncryptionStatus","CameraStatusResponse","CameraStatus","CardDispenserStatusResponse","BarcodeReaderStatusResponse","ScannerStatus","FingerprintStatusResponse","DocumentScannerStatusResponse","DocumentPrinterStatusResponse","PrinterStatus","IDScannerStatusResponse","PassportScannerStatusResponse","RFIDReaderStatusResponse","ReaderStatus","SignpadStatusResponse","PadStatus","PalmveinScannerStatusResponse","EKTPReaderStatusResponse","ChecksAcceptorStatusResponse","VoiceGuidanceStatusResponse","SpeakerStatus","TerminalStatusResponse","TerminalStatus","ConnectionStatus","CardReaderStatusResponse","ChipStatus","AuthorizationResponse","Machine","Code","EncryptionInfo","isEncryptionMode","publicKey","aesKeySeed","aesIVSeed","getInstance","instance","EncryptionHelper","encryptionInfo","encryptRSA","encrypt","JSEncrypt","setPublicKey","encryptAES","iv","keyToUse","ivToUse","encrypted","CryptoJS","AES","enc","Utf8","parse","mode","CBC","padding","pad","Pkcs7","toString","decryptAES","encryptedData","decrypted","decrypt","md5Hash","MD5","sha256Hash","SHA256","generateRandomKey","lib","WordArray","random","WebSocketClient","ws","reconnectAttempts","maxReconnectAttempts","reconnectInterval","isConnected","config","connect","Promise","resolve","reject","url","buildWebSocketUrl","WebSocket","onopen","event","OnConnectToWARPCore","onmessage","handleMessage","onclose","OnDisconnectToWARPCore","attemptReconnect","onerror","error","disconnect","close","send","formattedMessage","formatMessage","JSON","stringify","getConnectionStatus","protocol","window","location","host","webSocketUrl","port","webSocketPort","routeMessage","catch","ATMDeviceAPI","webSocketClient","init","defaultConfig","getWebSocketClient","getEventHandler","getEncryptionInfo","_ATMDeviceAPI$webSock"],"mappings":"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"}